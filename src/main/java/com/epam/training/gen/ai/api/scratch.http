### Module 3. Work with Different Models

### Request 3.1 gpt-4 deployment name with 0.1 temperature
POST http://localhost:8080/chat
Content-Type: application/json

{
  "temperature": 0.1,
  "model": "gpt-4",
  "input": "Explain why man needs woman? Answer with humor"
}

### Response 3.1
HTTP/1.1 200
Content-Type: text/plain;charset=UTF-8
A man needs a woman because life is like a sock drawer – without her, it's just a bunch of unmatched socks!
Plus, who else is going to remind him that the milk he's about to drink expired a week ago? And let's be honest,
a woman brings balance to his life, like a good Wi-Fi signal in a dead zone – suddenly, everything just works better!

### Request 3.2 gpt-4o-2024-05-13 deployment name with 1.0 temperature
POST http://localhost:8080/chat
Content-Type: application/json

{
  "temperature": 1.0,
  "model": "gpt-4o-2024-05-13",
  "input": "What pros and cons of microservice architecture?"
}

### Response 3.2
HTTP/1.1 200
Content-Type: text/plain;charset=UTF-8
Sure! Here are some pros and cons of microservice architecture, with a touch of humor:

### Pros:

1. **Scalability**:
    - You can scale up individual microservices independently, kind of like upgrading your coffee machine without redesigning the whole kitchen.

2. **Flexibility**:
   - Different teams can use different tech stacks, which means you can have a "Java island" and a "Node.js beachfront" at the same time.

3. **Resilience**:
   - One microservice crashing doesn’t bring down the whole system, similar to how one bad joke in a stand-up routine doesn’t necessarily ruin the entire show.

4. **Faster Deployment**:
   - Smaller codebases mean quicker iterations and faster deployments. It's like cooking mini-pizzas instead of full-sized ones – they get ready faster!

5. **Focused Teams**:
   - Each team can focus on a specific service, meaning they can become experts in their little domain. It’s like having a master chef for each course in a meal.

### Cons:

1. **Complexity**:
    - Managing a bunch of microservices can get as complicated as trying to keep track of all the characters.

### Request 3.3 wrong gpt-44 deployment name
POST http://localhost:8080/chat
Content-Type: application/json

{
  "temperature": 0.1,
  "model": "gpt-44",
  "input": "Explain why man needs woman? Answer with humor"
}

### Response 3.3
HTTP/1.1 500
Content-Type: text/plain;charset=UTF-8

{
    "timestamp": "2024-12-09T17:15:17.443+00:00",
    "status": 500,
    "error": "Internal Server Error",
    "path": "/api/v3/chat"
}

### Module 4. Semantic Kernel Plugins

### Request 4.1 calculate age in minutes from birthday
POST localhost:8080/api/v4/age-calculator
Content-Type: application/json

{
  "birthDay": "Sunday, January 12, 2001"
}

### Response 4.1
HTTP/1.1 200
Content-Type: text/plain;charset=UTF-8
To convert 8395 days into minutes, we need to know that there are 24 hours in a day and 60 minutes in an hour.

First, let's find the number of hours in 8395 days: 8395 days * 24 hours/day = 201,480 hours.

Now, to find the number of minutes, we multiply the number of hours by 60: 201,480 hours * 60 minutes/hour = 12,088,800 minutes.

Therefore, 8395 days is equal to 12,088,800 minutes.

### Request 4.2 get weather forecast for tomorrow in Miami, Florida and clothes suggestions
POST localhost:8080/api/v4/age-calculator
Content-Type: application/json

{
  "city": "Miami, Florida"
}

### Response 4.2
HTTP/1.1 200
Content-Type: text/plain;charset=UTF-8
To convert 8395 days into minutes, we need to know that there are 24 hours in a day and 60 minutes in an hour.

For the weather forecast in Miami, Florida on December 14, 2024, with temperatures ranging between 19°C to 24°C and moderate humidity at 53%–66%, here are some clothing suggestions:
1. Lightweight long-sleeve shirts or blouses: Opt for breathable fabrics like cotton or linen to stay cool in the mild temperatures.
2. Light jackets or cardigans: With temperatures starting at 19°C in the morning, layering with a light jacket or a cardigan can provide necessary warmth.
3. Jeans or trousers: Pair your tops with comfortable jeans or light trousers to maintain a casual yet presentable look.
4. Sundresses or skirts: If you prefer dresses or skirts, choose lightweight materials like cotton or chiffon for comfort.
5. Closed-toe shoes: Opt for comfortable closed-toe shoes like sneakers or loafers to protect your feet and handle any potential humidity or light rain.
6. Sunglasses and a hat: Protect your eyes and face from the sun with sunglasses and wear a hat to shield yourself if necessary.
7. Light accessories: Accessorize with lightweight scarves or jewelry to enhance your outfit without feeling weighed down.

Remember to follow the forecast updates as the weather conditions may change closer to the date.


### Module 5. Embeddings

### Request 5.1. Create Qdrant collection
POST localhost:8080/api/v5/vector/collections/test_collection
Content-Type: application/json

{
  "size": 1536
}

### Response 5.1
HTTP/1.1 200
Content-Type: text/plain;charset=UTF-8

Collection created with response: {result: true
time: 0.21375812
}

### Request 5.2. Delete Qdrant collection
DELETE localhost:8080/api/v5/vector/collections/test_collection

### Response 5.2
HTTP/1.1 200
Content-Type: text/plain;charset=UTF-8

Collection deleted with response: {result: true
time: 0.033812463
}

### Request 5.3. Get embeddings
POST localhost:8080/api/v5/embeddings
Content-Type: application/json

{
  "input": "What is the sense of life?"
}

### Response 5.3
HTTP/1.1 200
Content-Type: text/plain;charset=UTF-8

[
    {
        "promptIndex": 0,
        "embedding": [
            0.008420758,
...
        ],
        "embeddingAsString": "..."
    }
]

### Request 5.4. Save embeddings
POST localhost:8080/api/v5/collections/test_collection/points
Content-Type: application/json

{
  "input": "What is the sense of life?"
}

### Response 5.4
HTTP/1.1 200


### Request 5.5. Search embeddings
POST localhost:8080/api/v5/collections/test_collection/points/query
Content-Type: application/json

{
  "input": "life"
}

### Response 5.5
HTTP/1.1 200
Content-Type: text/plain;charset=UTF-8

# TODO: Replace mocked up response with actual
# Now I catched exception: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: Direct self-reference leading
# to cycle (through reference chain: java.util.Collections$UnmodifiableRandomAccessList[0]->io.qdrant.client.grpc.Points$ScoredPoint["unknownFields"]->com.google.protobuf.UnknownFieldSet["defaultInstanceForType"])

{
  "result": [
    { "id": 10, "score": 0.81 },
    { "id": 14, "score": 0.75 },
    { "id": 11, "score": 0.73 }
  ],
  "status": "ok",
  "time": 0.001
}